/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/al4ELF3srKC
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Card, CardHeader, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import 'dotenv/config'


const fetchShipData = async () => {
  const res = await fetch(
    `https://rest.fnar.net/ship/ships/wit.iwfa`,
    {
      headers: {
        Accept: "application/json",
        Authorization: `${process.env.TOKEN}`,
        cache: "no-store",
      },
      next: { revalidate: 0 },
    }
  );
  if (!res.ok) {
    throw new Error("Failed to fetch data");
  }
  return res.json();
};
const fetchFuelData = async () => {
  const res = await fetch(
    `https://rest.fnar.net/ship/ships/fuel/wit.iwfa`,
    {
      headers: {
        Accept: "application/json",
        Authorization: `${process.env.TOKEN}`,
        cache: "no-store",
      },
      next: { revalidate: 0 },
    }
  );
  if (!res.ok) {
    throw new Error("Failed to fetch data");
  }
  return res.json();
};
const fetchFlightData = async () => {
  const res = await fetch(
    `https://rest.fnar.net/ship/flights/wit.iwfa`,
    {
      headers: {
        Accept: "application/json",
        Authorization: `${process.env.TOKEN}`,
        cache: "no-store",
      },
      next: { revalidate: 0 },
    }
  );
  if (!res.ok) {
    throw new Error("Failed to fetch data");
  }
  return res.json();
};

export async function Ships() {
  
const shipData = await fetchShipData()
const fuelData = await fetchFuelData()
const flightData = await fetchFlightData()

const shipNameToFilter = [
  "ACU-001",
];


const filteredShipData = shipData.filter((item: any) =>
  shipNameToFilter.includes(item.Name)
);
//console.log(filteredShipData)

const filteredFuelData = fuelData.filter((item: any)=>
  shipNameToFilter.includes(item.Name)
)
//console.log(filteredFuelData)

// Extract FlightIds from filteredShipData
const filteredFlightIds = filteredShipData.map((item: any) => item.FlightId);

// Filter flightData to include only those with FlightId in filteredFlightIds
const filterFlightData = flightData.filter((item: any) =>
  filteredFlightIds.includes(item.FlightId)
);

console.log(filterFlightData[0].Segments[0])



  return (
    <Card className="w-full max-w-4xl shadow-lg border-2 border-muted-foreground rounded-3xl">
      <CardHeader className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <RocketIcon className="w-6 h-6" />
            <h3 className="text-lg font-semibold">Starship Odyssey</h3>
          </div>
          <div className="flex items-center gap-2 text-muted-foreground">
            <RadarIcon className="w-5 h-5" />
            <span>TRS-1234</span>
          </div>
        </div>
        <div className="flex items-center gap-2 text-muted-foreground">
          <FlagIcon className="w-5 h-5" />
          <span>In Transit</span>
        </div>
      </CardHeader>
      <CardContent className="grid gap-6">
        <div className="grid sm:grid-cols-2 gap-4">
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Cargo Space (T)</span>
              <span className="text-sm font-medium">15 / 50 T</span>
            </div>
            <Progress value={30} className="w-full bg-muted" />
          </div>
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Cargo Space (m³)</span>
              <span className="text-sm font-medium">15 / 50 m³</span>
            </div>
            <Progress value={30} className="w-full bg-muted" />
          </div>
        </div>
        <div className="grid sm:grid-cols-2 gap-4">
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Fuel Tank A</span>
              <span className="text-sm font-medium">80%</span>
            </div>
            <Progress value={80} className="w-full bg-muted" />
          </div>
          <div>
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">Fuel Tank B</span>
              <span className="text-sm font-medium">92%</span>
            </div>
            <Progress value={92} className="w-full bg-muted" />
          </div>
        </div>
        <Separator />
        <div className="grid gap-4">
          <h4 className="text-lg font-semibold">Flight Path</h4>
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-muted shadow-sm">
                <th className="py-2 text-left">#</th>
                <th className="py-2 text-left">Type</th>
                <th className="py-2 text-left">Destination</th>
                <th className="py-2 text-left">Duration</th>
                <th className="py-2 text-left">Distance</th>
              </tr>
            </thead>
            <tbody>
              <tr className="border-b border-muted shadow-sm">
                <td className="py-2">1</td>
                <td className="py-2">
                  <div className="flex items-center gap-2">
                    <LocateIcon className="w-5 h-5 text-muted-foreground" />
                    <span>Earth</span>
                  </div>
                </td>
                <td className="py-2">Low Earth Orbit</td>
                <td className="py-2">2 hours</td>
                <td className="py-2">400 km</td>
              </tr>
              <tr className="border-b border-muted shadow-sm">
                <td className="py-2">2</td>
                <td className="py-2">
                  <div className="flex items-center gap-2">
                    <RocketIcon className="w-5 h-5 text-muted-foreground" />
                    <span>Low Earth Orbit</span>
                  </div>
                </td>
                <td className="py-2">Mars</td>
                <td className="py-2">6 months</td>
                <td className="py-2">54.6 million km</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div className="grid gap-4">
          <h4 className="text-lg font-semibold">Estimated Landing Time</h4>
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Estimated Landing Time:</span>
            <span className="text-sm font-medium">6:45 AM</span>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

function FlagIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z" />
      <line x1="4" x2="4" y1="22" y2="15" />
    </svg>
  )
}


function LocateIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="2" x2="5" y1="12" y2="12" />
      <line x1="19" x2="22" y1="12" y2="12" />
      <line x1="12" x2="12" y1="2" y2="5" />
      <line x1="12" x2="12" y1="19" y2="22" />
      <circle cx="12" cy="12" r="7" />
    </svg>
  )
}


function RadarIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19.07 4.93A10 10 0 0 0 6.99 3.34" />
      <path d="M4 6h.01" />
      <path d="M2.29 9.62A10 10 0 1 0 21.31 8.35" />
      <path d="M16.24 7.76A6 6 0 1 0 8.23 16.67" />
      <path d="M12 18h.01" />
      <path d="M17.99 11.66A6 6 0 0 1 15.77 16.67" />
      <circle cx="12" cy="12" r="2" />
      <path d="m13.41 10.59 5.66-5.66" />
    </svg>
  )
}


function RocketIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z" />
      <path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" />
      <path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" />
      <path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" />
    </svg>
  )
}
